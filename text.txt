tutorial 1:

agenda: end to end datascience project.
Require for ml end to end project:
1. install anaconda
2. git and github repository
3. project setup
4. requirement.txt

step1. create different environemnet for different project. different projects should be in different folder so that you can create different environment in particular folder to create packages. 


open terminal:
    1. creating a new environment in that folder for all packages.
    creating venv environment in terminal: conda create -p venv python==3.11.5
    2. activating the environemnet:
    in terminal: conda activate venv/
    3. create github repository 
        create README.md file (to write description for the project)
        git init
        to track file:git add README.md
        git status 

        git branch -M main
        git branch
        git remote add origin https://github.com/pushpaneupane710/01_ML_project.git

        refresh github. you sync project to github repository.


        git pull origin main

    4. create file requirements.txt
     in this file you write all packages name
     and can install all written packages by using command in the terminal.

     in terminal: pip install -r requirements.txt

     5. setup.py file
     (make entire application a complete package, so this packege you can import)
     we normally make packages of the projects after we finish projects.

    python setup.py install


using '-e .'
    pip install -r requirements.txt

#######################################################

tutorial 2:

Resource link to krish naik hindi: https://www.youtube.com/watch?v=NL7Kshd2PW8&t=28s

automate project structure using 2 ways: cookiecutter python or manual process.

pipeline: 
    training pipeline (read data, EDA, Feature engineering, train model, model training, model evaluation, ready model)
    prediction pipeline (on deployed model take client's input and predict output)

components : 
    step1. data source (mysql or mongodb) can use DVC
    step2. data ingestion (read data, train test split)
    step3. data transformation(EDA, Feature engineering (handle missing values, outliers, etc))
    step4. model training (supply multiple models)
    step 5.model monitoring(model monitoring tools like evidently AI)
    CI/CD PIPELINE with help of GITHUB actions
    step6.model deployment( )

write this code in template.py file name:

# responsible for creating entire project structure
import os
from pathlib import Path
import logging

logging.basicConfig(level=logging.INFO)

project_name="01_ML_project"

list_of_files=[
    #".github/workflows/.gitkeep",
    f"src/{project_name}/__init__.py",
    f"src/{project_name}/components/__init__.py",
    f"src/{project_name}/components/data_ingestion.py",
    f"src/{project_name}/components/model_trainer.py",
    f"src/{project_name}/components/model_monitoring.py",
    
    f"src/{project_name}/pipelines/__init__.py",
    f"src/{project_name}/pipelines/training_pipeline.py",  
    f"src/{project_name}/pipelines/prediction_pipeline.py",
    f"src/{project_name}/exception.py",
    f"src/{project_name}/logger.py",
    f"src/{project_name}/utils.py",
    "app.py",
    "Dockerfile",
    "requirements.txt"
    "setup.py"
    
]


for filepath in list_of_files:
    filepath=Path(filepath)
    filedir,filename=os.path.split(filepath)
    
    if filedir!="":
        os.makedirs(filedir,exist_ok=True)
        logging.info(f"Creating directory:{filedir} for the file {filename}")
        
    if (not os.path.exists(filepath)) or (os.path.getsize(filepath)==0):
        with open(filepath,"w") as f:
            pass
            logging.info("Creating empty file: {filepath}")
            
    else:
        logging.info(f"{filename} is already exists")


in terminal: python template.py 
Note : I deleted src also, then run python template.py
note: pip install logger
note: no need to pip install os because os is in-built module in python 

Python-OS-Module Functions
Here we will discuss some important functions of the Python os module :

        Handling the Current Working Directory
        Creating a Directory
        Listing out Files and Directories with Python
        Deleting Directory or Files using Python
    
git status
git add .
git status
git commit -m "Project structure"
git push origin main

#####################################################

tutorial 4


git status
git add .
git status
git commit -m "Project structure"
git push origin main

#####################################################


